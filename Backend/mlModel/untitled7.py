# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zwYOykUcuxB4EyMp3ovuFFBU0_xqvoFM

Install all necessary packages
"""

!pip install -U openai-whisper langdetect sentence-transformers indictrans2-ai4bharat gTTS weasyprint jinja2 deep-translator
!apt install -y ffmpeg
!pip install --upgrade pip
!pip install secure-smtplib

"""✅ Imports"""

import whisper
import pandas as pd
import torch
from langdetect import detect
from sentence_transformers import SentenceTransformer, util
from indictrans2 import IndicTranslator
from gtts import gTTS
from jinja2 import Environment, FileSystemLoader
from weasyprint import HTML
from IPython.display import Audio, display
from deep_translator import GoogleTranslator
import datetime
import smtplib
import os
from email.message import EmailMessage
from google.colab import files

"""Load Models & Files"""

whisper_model = whisper.load_model("medium")
text_model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
sbert = SentenceTransformer('all-MiniLM-L6-v2')
translator = IndicTranslator()

# Load CSVs
df_queries = pd.read_csv('VoiceForWeak - Queries (1).csv')
df_sections = pd.read_csv('VoiceForWeak - Copy of IPC Sections (1).csv')

# Preprocess
query_columns = [f"Query{i}" for i in range(1, 11)]
all_queries, ipc_mapping = [], []
for idx, row in df_queries.iterrows():
    for col in query_columns:
        if pd.notna(row[col]):
            all_queries.append(row[col])
            ipc_mapping.append(row['IPC Section'])

stored_embeddings = text_model.encode(all_queries, convert_to_tensor=True)
query_embeddings = sbert.encode(all_queries, convert_to_tensor=True)

"""Transcription + Classification"""

def transcribe_audio(path):
    result = whisper_model.transcribe(path, task="translate")
    print("Detected Language:", result['language'])
    print("English Translation:", result['text'])
    return result['text'], result['language']

def classify_ipc(text, top_k=3):
    input_embedding = sbert.encode(text, convert_to_tensor=True)
    cos_scores = util.pytorch_cos_sim(input_embedding, query_embeddings)[0]
    top_indices = torch.topk(cos_scores, k=top_k).indices.tolist()
    top_sections = []
    for idx in top_indices:
        section = ipc_mapping[idx]
        info = df_sections[df_sections['IPC Section'] == section].iloc[0].to_dict()
        top_sections.append({
            "IPC_Section": section,
            "Name": info['Name'],
            "Description": info['Description'],
            "Punishment": info['Punishment'],
            "Cognizability": info['Cognizable/Non-Cognizable'],
            "Bailability": info['Bailable/Non-Bailable'],
            "Category": info['Category']
        })
    return top_sections

"""TTS + PDF Template Utils"""

# ✅ Function to auto-select template based on language
def get_template_for_lang(original_lang):
    lang_templates = {
        "hi": "ipc_complaint_template_hi.html",  # Hindi
        "en": "ipc_complaint_template_en.html",  # English
        "gu": "ipc_complaint_template_gu.html",  # Gujarati
        "ta": "ipc_complaint_template_ta.html",  # Tamil
        "bn": "ipc_complaint_template_bn.html",  # Bengali
        "pa": "ipc_complaint_template_pa.html",  # Punjabi
    }
    return lang_templates.get(original_lang, "ipc_complaint_template_en.html")  # Default English


# ✅ Function to generate audio in regional language
def speak_text(text, original_lang, filename="ipc_output.mp3"):
    # Map original_lang to gTTS language codes
    gtts_lang_map = {
        "hi": "hi",  # Hindi
        "en": "en",  # English
        "gu": "gu",  # Gujarati
        "ta": "ta",  # Tamil
        "bn": "bn",  # Bengali
        "pa": "pa"   # Punjabi
    }
    lang_code = gtts_lang_map.get(original_lang, "en")  # Default to English if not mapped
    try:
        tts = gTTS(text=text, lang=lang_code)
        tts.save(filename)
        print(f"✅ Audio saved as {filename} in language: {lang_code}")
    except Exception as e:
        print(f"❌ Failed to generate audio: {e}")


# ✅ Function to generate PDF complaint letter
def create_letter_pdf(user_name, user_location, details, section_data, other_sections=None,
                      gender="Male", age="30", phone="NA", id_number="NA", email="NA",
                      original_lang="en", output_file="ipc_letter.pdf"):
    """
    Generates the IPC complaint letter PDF in regional language.
    Automatically selects template based on original_lang.
    """
    template_file = get_template_for_lang(original_lang)
    env = Environment(loader=FileSystemLoader("."), autoescape=True)
    template = env.get_template(template_file)

    html_out = template.render(
        Current_Date=datetime.date.today().strftime("%d-%m-%Y"),
        Police_Station_or_Department_Name="Concerned Police Station",
        District_City=user_location,
        IPC_Section_Number=section_data['IPC_Section'],
        IPC_Section_Name=section_data['Name'],
        IPC_Section_Description=section_data['Description'],
        Punishment=section_data['Punishment'],
        Cognizability=section_data['Cognizability'],
        Bailability=section_data['Bailability'],
        Offence_Category=section_data['Category'],
        Full_Name=user_name,
        Age=age,
        Full_Address=user_location,
        User_Complaint_Summary=details,
        Gender=gender,
        Phone_Number=phone,
        ID_Number=id_number,
        Email=email,
        Signature_or_Thumb="Signature",
        Village_District=user_location,
        Other_IPC_Sections=other_sections or []
    )

    HTML(string=html_out).write_pdf(output_file)
    print(f"✅ PDF generated: {output_file} using template: {template_file}")

"""Email Utility"""

def send_email_with_attachments(recipient, subject, body, attachments):
    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = "youremail@gmail.com"  # replace
    msg['To'] = recipient
    msg.set_content(body)

    for file_path in attachments:
        with open(file_path, "rb") as f:
            file_data = f.read()
            msg.add_attachment(file_data, maintype="application", subtype="pdf", filename=os.path.basename(file_path))

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login("youremail@gmail.com", "your_app_password")  # ⚠️ Use App Password
            smtp.send_message(msg)
        print(f"✅ Email sent to {recipient}")
    except Exception as e:
        print(f"❌ Email sending failed: {e}")

""" MAIN EXECUTION"""

!apt-get update
!apt-get install fonts-noto fonts-noto-cjk fonts-lohit-* -y

# ✅ Step 1: Transcribe Audio
audio_path = "Punjabi.mp3"
text, original_lang = transcribe_audio(audio_path)
translator = GoogleTranslator(source='auto', target=original_lang)

# ✅ Step 2: Classify IPC Sections
ipc_sections_raw = classify_ipc(text)
seen, ipc_sections = set(), []
for sec in ipc_sections_raw:
    if sec['IPC_Section'] not in seen:
        ipc_sections.append(sec)
        seen.add(sec['IPC_Section'])

if not ipc_sections:
    raise ValueError("❌ No IPC sections found for the complaint text.")

main_section = ipc_sections[0]
other_sections = ipc_sections[1:] if len(ipc_sections) > 1 else []

# ✅ Step 3: Show IPCs (English + Regional)
print("\n" + "=" * 80)
print("📘 IPC SECTIONS (ENGLISH)")
print("=" * 80)
for section in ipc_sections:
    print(f"\n➡ IPC Section: {section['IPC_Section']} - {section['Name']}")
    print(f"📝 Description : {section['Description']}")
    print(f"⚖ Punishment   : {section['Punishment']}")
    print(f"🧷 Bailable     : {section['Bailability']}")
    print(f"🚓 Cognizable   : {section['Cognizability']}")
    print(f"📂 Category     : {section['Category']}")

# Translate IPC sections for Regional Language
translated_sections = []
print("\n" + "=" * 80)
print(f"🌐 IPC SECTIONS ({original_lang.upper()})")
print("=" * 80)
for section in ipc_sections:
    block = (
        f"IPC Section: {section['IPC_Section']} - {section['Name']}. "
        f"Description: {section['Description']}. "
        f"Punishment: {section['Punishment']}. "
        f"Bailable: {section['Bailability']}. "
        f"Cognizable: {section['Cognizability']}. "
        f"Category: {section['Category']}."
    )
    try:
        translated = translator.translate(block)
        translated_sections.append(translated)
        print(f"\n➡ {translated}")
    except Exception as e:
        print(f"❌ Translation failed: {e}")
        translated_sections.append(block)

# ✅ Step 4: Audio in Regional Language
combined_text = "\n\n".join(translated_sections)
speak_text(combined_text, original_lang)

# ✅ Step 5: Get User Details
print("\n📝 Please fill in the complainant's details:")
user_name = input("Full Name: ")
user_location = input("Address/District: ")
age = input("Age: ")
gender = input("Gender: ")
phone = input("Phone: ")
id_number = input("ID Number: ")
email = input("Email (to receive PDFs & Audio): ")

# ✅ Step 6: Bidirectional User Detail Translation (with language detection)
from langdetect import detect

def conditional_translate(text, target_lang):
    try:
        if '@' in text or text.isdigit():
            return text  # Skip emails, phone numbers, IDs
        detected_lang = detect(text)
        if detected_lang != target_lang:
            return GoogleTranslator(source='auto', target=target_lang).translate(text)
        return text  # Already in target_lang
    except:
        return text  # fallback

# English PDF user details
user_name_en = conditional_translate(user_name, 'en')
user_location_en = conditional_translate(user_location, 'en')
email_en = conditional_translate(email, 'en')

# Regional PDF user details
user_name_regional = conditional_translate(user_name, original_lang)
user_location_regional = conditional_translate(user_location, original_lang)
email_regional = conditional_translate(email, original_lang)

# ✅ Step 7: Translate nested IPC section fields properly
def deep_translate_section(section, translator):
    return {
        key: translator.translate(value) if isinstance(value, str) else value
        for key, value in section.items()
    }

translated_main_section = deep_translate_section(main_section, translator)
translated_other_sections = [deep_translate_section(sec, translator) for sec in other_sections]

# Translate complaint summary text
translated_summary = translator.translate(text)

# ✅ Step 8: Generate PDFs
# English PDF
create_letter_pdf(
    user_name_en, user_location_en, text, main_section, other_sections,
    age, gender, phone, id_number, email_en,
    original_lang="en", output_file="ipc_letter_english.pdf"
)

# Regional Language PDF
create_letter_pdf(
    user_name_regional, user_location_regional, translated_summary,
    translated_main_section, translated_other_sections,
    age, gender, phone, id_number, email_regional,
    original_lang=original_lang, output_file="ipc_letter_regional.pdf"
)
print("\n✅ PDF generated: ipc_letter_english.pdf & ipc_letter_regional.pdf")

# ✅ Step 9: Auto Download PDFs
from google.colab import files
files.download("ipc_letter_english.pdf")
files.download("ipc_letter_regional.pdf")

# ✅ Step 10: Show Regional Audio
print(f"\n🔊 Playing translated audio: ipc_output.mp3")
display(Audio("ipc_output.mp3"))

# ✅ Step 11: Send Email
try:
    send_email_with_attachments(
        recipient=email,
        subject="Your Legal Complaint PDF & Audio",
        body="Please find attached your IPC complaint letter in English and regional language, along with the audio version.",
        attachments=["ipc_letter_english.pdf", "ipc_letter_regional.pdf", "ipc_output.mp3"]
    )
    print("📧 Email sent successfully!")
except Exception as e:
    print(f"❌ Email sending failed: {e}")